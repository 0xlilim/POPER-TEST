name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: 476114136251.dkr.ecr.ap-northeast-1.amazonaws.com/poper
  ECS_CLUSTER: poper-app-cluster
  ECS_SERVICE: run-php-poper
  CONTAINER_NAME: php-poper-test

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t ${{ env.ECR_REPOSITORY }}:${IMAGE_TAG} .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.IMAGE_TAG }}'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: trivy-results.sarif
      
      - name: Push Docker image to ECR
        run: |
            docker push ${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.IMAGE_TAG }}
    
            
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 使用 sed 直接替换
      - name: Update task definition image use sed
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.IMAGE_TAG }}"
          ECR_REPO="${{ env.ECR_REPOSITORY }}"
          TASK_DEFINITION_FILE="deploy/ecs-task-definition.json"
          NEW_IMAGE="${ECR_REPO}:${IMAGE_TAG}"

          # 使用 sed 查找并替换固定的字符串 "poper:latest" 为最新的镜像标签，替换原来是用的jq
          sed -i "s|\"image\": \"poper:latest\"|\"image\": \"${NEW_IMAGE}\"|g" "$TASK_DEFINITION_FILE"

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: deploy/ecs-task-definition-updated.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          force-new-deployment: true
